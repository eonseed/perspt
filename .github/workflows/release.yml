name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.4.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get tag name
      id: tag_name
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
        release_name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
        body: |
          ## Changes in ${{ steps.tag_name.outputs.TAG_NAME }}
          
          ### Features
          - Added cross-platform binary releases
          - Improved documentation with Sphinx
          
          ### Downloads
          - **Linux (x86_64)**: `perspt-linux-x86_64`
          - **Windows (x86_64)**: `perspt-windows-x86_64.exe`
          - **macOS (x86_64)**: `perspt-macos-x86_64`
          - **macOS (ARM64)**: `perspt-macos-arm64`
          
          ### Installation
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x perspt-*`
          3. Move to your PATH: `sudo mv perspt-* /usr/local/bin/perspt`
          
          See the [documentation](https://eonseed.github.io/perspt/) for usage instructions.
        draft: false
        prerelease: false

  build-release:
    name: Build Release Binary
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: perspt
            asset_name: perspt-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: perspt.exe
            asset_name: perspt-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: perspt
            asset_name: perspt-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: perspt
            asset_name: perspt-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  build-documentation:
    name: Build and Upload Documentation
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build Rust documentation
      run: cargo doc --no-deps --all-features

    - name: Build Sphinx HTML documentation
      run: |
        cd docs/perspt_book
        uv run make html

    - name: Build Sphinx PDF documentation
      run: |
        cd docs/perspt_book
        # Install comprehensive LaTeX packages and fonts for PDF generation
        sudo apt-get update
        sudo apt-get install -y \
          texlive-xetex \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-luatex \
          fonts-liberation \
          fonts-dejavu \
          fonts-noto \
          fonts-noto-color-emoji \
          fonts-noto-extra \
          fontconfig
        
        # Update font cache
        sudo fc-cache -fv
        
        # Use CI configuration and build PDF
        export CI=true
        export GITHUB_ACTIONS=true
        cp source/conf_ci.py source/conf.py
        uv run sphinx-build -b latex source build/latex
        cd build/latex && make || echo "PDF build failed, continuing with release..."

    - name: Package documentation
      run: |
        mkdir -p documentation-package
        cp -r target/doc documentation-package/rust-docs
        cp -r docs/perspt_book/build/html documentation-package/sphinx-html
        cp docs/perspt_book/build/latex/*.pdf documentation-package/ 2>/dev/null || true
        cd documentation-package
        zip -r ../documentation.zip .

    - name: Upload Documentation Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: documentation.zip
        asset_name: documentation.zip
        asset_content_type: application/zip

  checksums:
    name: Generate Checksums
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - name: Download release assets
      run: |
        # Get the release ID and download all assets
        RELEASE_ID="${{ needs.create-release.outputs.release_id }}"
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -H "Accept: application/vnd.github.v3+json" \
             "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}/assets" \
             | jq -r '.[] | select(.name | test("^perspt-")) | .browser_download_url' \
             | xargs -I {} curl -L -o "$(basename {})" {}

    - name: Generate checksums
      run: |
        for file in perspt-*; do
          if [[ -f "$file" ]]; then
            sha256sum "$file" >> checksums.txt
          fi
        done
        
    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
