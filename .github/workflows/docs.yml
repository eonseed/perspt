name: Deploy Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'Cargo.toml'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-docs:
    name: Build Rust Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-docs-

    - name: Build API Documentation with custom styling
      run: |
        export RUSTDOCFLAGS="--html-in-header docs/header.html --extend-css docs/custom.css --default-theme dark"
        cargo doc --no-deps --all-features

    - name: Build Sphinx documentation (if exists)
      run: |
        if [ -d "docs/perspt_book" ]; then
          cd docs/perspt_book
          uv run make html
        fi

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Prepare documentation for Pages
      run: |
        mkdir -p _site
        
        # Copy Rust API docs
        cp -r target/doc/* _site/
        
        # Copy Sphinx docs if they exist
        if [ -d "docs/perspt_book/build/html" ]; then
          mkdir -p _site/book
          cp -r docs/perspt_book/build/html/* _site/book/
        fi
        
        # Create simple index page
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Perspt Documentation</title>
            <style>
                body { 
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                    max-width: 800px; 
                    margin: 2rem auto; 
                    padding: 0 1rem;
                    background: #0f172a;
                    color: #e2e8f0;
                }
                h1 { color: #00d4aa; text-align: center; }
                .nav-card { 
                    display: block; 
                    padding: 1.5rem; 
                    margin: 1rem 0; 
                    background: #1e293b; 
                    border: 1px solid #334155;
                    border-radius: 8px; 
                    text-decoration: none; 
                    color: #e2e8f0;
                    transition: all 0.2s ease;
                }
                .nav-card:hover { 
                    background: #334155; 
                    border-color: #00d4aa;
                }
                .nav-title { font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem; color: #00d4aa; }
                .nav-desc { color: #94a3b8; }
            </style>
        </head>
        <body>
            <h1>üëÅÔ∏è Perspt Documentation</h1>
            
            <a href="perspt/index.html" class="nav-card">
                <div class="nav-title">üìö API Documentation</div>
                <div class="nav-desc">Complete Rust API reference with custom styling</div>
            </a>
            
            <a href="book/index.html" class="nav-card" style="display: none;" id="sphinx-link">
                <div class="nav-title">ÔøΩ User Guide</div>
                <div class="nav-desc">Comprehensive user guide and tutorials</div>
            </a>
            
            <script>
                // Show sphinx link only if it exists
                fetch('book/index.html')
                    .then(response => {
                        if (response.ok) {
                            document.getElementById('sphinx-link').style.display = 'block';
                        }
                    })
                    .catch(() => {});
            </script>
        </body>
        </html>
        EOF

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3

  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-docs
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
